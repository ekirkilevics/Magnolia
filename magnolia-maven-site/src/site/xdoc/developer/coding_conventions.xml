<?xml version="1.0"?>
<document>
    <properties>
        <title>Coding Conventions</title>
        <author email="fgiust(at)users.sourceforge.net">Fabrizio Giustina</author>
    </properties>
    <body>
        <section name="Forewords">
            <p>
                This document describes a list of coding conventions that are required for code submissions to the
                project. By default, the coding conventions for most Open Source Projects should follow the existing
                coding conventions in the code that you are working on. For example, if the bracket is on the line after
                the if statement, then you should write all your code to have that convention.
            </p>
            <p>
                Below is a list of coding conventions that are specific to this project. Anything else not specifically
                mentioned here should follow the official
                <a href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Sun Java Coding Conventions</a>
                .
            </p>
            <p>Here you can find the configuration files for</p>
            <ul>
                <li>
                    <a href="formatter-eclipse.epf">eclipse 3</a>
                    (import it from Preferences - Java - Code Style - Formatter)
                </li>
                <li>
                    <a href="formatter-idea.xml0">idea 4</a>
                    (rename the file with a .xml extension and put it into .IntelliJIdea/config/codestyles)
                </li>
            </ul>
        </section>
        <section name="Project specific coding conventions">
            <subsection name="1. Brackets">
                <p>
                    All brackets (class, method, if, try, etc) must begin on the same line and end on a new line.
                    Example :
                </p>
                <source>
                    <![CDATA[
public class SomeClass {
    public void someMethod() {
        if (xxx) {
        }
    }
}
]]>
                </source>
                <p>
                    <strong>Brackets are mandatory, even for single line statements !</strong>
                </p>
                <source>
                    <![CDATA[
// Incorrect
if (expression)
    // some code

// Correct
if (expression) {
    // some code
}
]]>
                </source>
            </subsection>
            <subsection name="2. Blank Spaces">
                <p>keywords followed by a parenthesis should be separated by a space. Example :</p>
                <source>
                    <![CDATA[
while (true) {
    // some code
}
]]>
                </source>
                <p>
                    Blank space should appear after commas in argument lists. Binary operators should be separated from
                    their operands by spaces :
                </p>
                <source>
                    <![CDATA[
a += c + d;
a = (a + b) / (c * d);

while (d++ = s++) {
    n++;
}

printSize("size is " + foo + "\n");
]]>
                </source>
            </subsection>
            <subsection name="3. Indentations">
                <p>
                    <strong>4 spaces. NO tabs</strong>
                    . Period. We understand that a lot of you like to use tabs, but the fact of the matter is that in a
                    distributed development environment, when the cvs commit messages get sent to a mailing list, they
                    are almost impossible to read if you use tabs.
                </p>
            </subsection>
            <subsection name="4. Comments">
                <p>
                    Javadoc SHOULD exist on all your class members (methods + class variables), including the private
                    ones. Also, if you are working on existing code and there currently isn't a javadoc for that
                    method/class/variable or whatever, then you should contribute and add it. This will improve the
                    project as a whole.
                </p>
                <p>
                    Also add code comments when you think it's necessary (like assumptions), especially when the code is
                    not obvious.
                </p>
            </subsection>
            <subsection name="5. Author references">
                <p>
                    If you contribute to a file (code or documentation), add yourself to the top of the file (below the
                    existing authors). For java files the preferred Javadoc format is:
                </p>
                <source>
                    <![CDATA[
@author devnickname
]]>
                </source>
            </subsection>
            <subsection name="6. Class variables">
                <p>
                    Class variables should not have any prefix and
                    <strong>must</strong>
                    be referenced using the
                    <code>this</code>
                    object. Example :
                </p>
                <source>
                    <![CDATA[
public class SomeClass {
    private String someString;
[...]
    public void someMethod() {
        logger.debug("Value = " + this.someString);
    }
}
]]>
                </source>
            </subsection>
            <subsection name="7. Parameter names">
                <p>Method parameters should not have any prefix. For example :</p>
                <source>
                    <![CDATA[
public void someMethod(String className) {
}
]]>
                </source>
            </subsection>
            <subsection name="8. Line length">
                <p>
                    Avoid lines longer than
                    <strong>120</strong>
                    characters for Code, comments, ...
                </p>
            </subsection>
            <subsection name="9. Versioning">
                <p>
                    All .java files should have a
                    <code>@version</code>
                    tag like the one below.
                </p>
                <source>
                    <![CDATA[
@version $Revision<space>$ ($Author<space>$)
]]>
                </source>
            </subsection>
            <subsection name="10. Qualified imports">
                <p>
                    All
                    <code>import</code>
                    statements should containing the full class name of classes to import and should not use the
                    <code>"*"</code>
                    notation :
                </p>
                <p>An example :</p>
                <source>
                    <![CDATA[
// Correct
import java.util.Date;
import java.net.HttpURLConnection;

// Not correct
import java.util.*;
import java.net.*;
]]>
                </source>
            </subsection>
        </section>
    </body>
</document>
