<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>I18N</title>
	</properties>
	<body>
		<section name="Internationalization">
			<p>
				<b>Attention!</b>
				This is concerning the general magnolia i18n mechanism. To make your content
				(paragraphs) multi-language capable you should read
				<a href="../templating/i18n.html">this</a>
				first.
			</p>
			<subsection name="Configuration">
				<p>the configuration is done in Config repository: /server/i18n:</p>

				<UL>
					<LI>define the application language (change the language node)</LI>
					<LI>the fall back language is en</LI>
					<LI>
						the standard bundle is
						info.magnolia.module.admininterface.messages_en.properties
					</LI>
				</UL>
			</subsection>

			<subsection name="General">
				<ul>
					<li>We use Propertyfiles</li>
					<li>We use JSTL fmt tags</li>
					<li>Each module has his own messages bundle</li>
				</ul>
			</subsection>

			<subsection name="JSP">
				<P>Use the standard fmt JSTL Tags</P>
				<p>examples:</p>
				<source>
					<![CDATA[
<title><fmt:message key="central.title"/></title>

<fmt:message key="buttons.editfooter" var="label"/>
<cms:editButton label="${label}" ..]]>
				</source>
			</subsection>

			<subsection name="Java (servlet, beans, ..)">
				<P>
					Use the MessagesManager.getMessages(request, ...) to get the Messages or
					MessagesManager.get(request, ....) to get a string. The mechanism will handle
					the exception if the request is null.
				</P>
			</subsection>

			<subsection name="javax.servlet.jsp.jstl.fmt.LocaleSupport">
				<P>
					If you can provide a PageContext, you can use the static methods of this class.
					Our system is behaving like JSTL so you will get the same result.
				</P>
			</subsection>

			<subsection name="Dialogs, Paragraphs">
				<P>
					the labels, .. can define a key which is searched in this order
					<OL>
						<LI>
							info.magnolia.module.admininterface.messages_templating_custom.properties
						</LI>
						<LI>info.magnolia.module.admininterface.messages_templating.properties</LI>
						<LI>if not found return the label (it is not a key)</LI>
					</OL>
				</P>
				<P>
					The class used in this case is TemplateMessagesUtil providing some static
					methods.
				</P>
			</subsection>

			<subsection name="messages_templating and messages_templating_custom">
				<P>
					I separated the strings, because we said that a bundle must be translated fully.
					in the messages_templating are our delilvered dialog, paragraph strings. If
					someone needs his own i18n-dialogs he will put the strings in
					messages_templating_custom. In this way he can have chinese-dialogs without a
					fully translated chinese-magnolia.
				</P>
			</subsection>

			<subsection name="Javascript">
				<P>
					Use the Object
					<code>mgnlMessages.get(key, basename, args[])</code>
					. basename and args are optional.
				</P>
				<p>
					Keys starting with js. will be added to the mgnlMessages-Object by
					admintemplate/js/messages.jsp
				</p>
			</subsection>

			<subsection name="UTF-8 in java properties files">
				<p>
					Java properyfiles are encoded in iso-8859-1. this standard does not support
					special characters. but there is an escaping mechanism to use unicode characters
					(utf-8) in this propertyfiles.
					<br />
					<br />
					An excample of a french propertyfile:
					<source>menu.roles=R\u00f4le</source>
					To make a proper file you can save your native textfile with utf-8 and then
					transform it into this special java-format. You can use therfore the java tool
					native2ascii.
					<source>
						<![CDATA[
native2ascii -encoding UTF-8 messages_fr.txt messages_fr.properties
]]>
					</source>
					To get a utf-8 file out of a propertyfile you will use:
					<source>
						<![CDATA[
native2ascii -reverse -encoding UTF-8 messages_fr.properties messages_fr.txt
]]>
					</source>
				</p>
			</subsection>
		</section>
	</body>
</document>
