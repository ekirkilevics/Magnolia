<?xml version="1.0"?>
<document>
    <properties>
        <title>Installing Magnolia</title>
        <author email="fgiust(at)users.sourceforge.net">Fabrizio Giustina</author>
    </properties>
    <body>
        <section name="Installing a plain Magnolia war (from svn or nightly build)">
        		<p>
        			If you download a nightly build or compile Magnolia from subversion using maven you will have a single
        			war file. This file is configured as an admin instance and can be deployed to an existing application
        			server following the same
        			<a href="install-wars.html">instructions for the war distribution</a>.
        		</p>
        </section>
        <section name="Multiple installation and advanced configuration">
            <p>
                Multiple instances of Magnolia 2.1 can now work on the same server (previous versions required to be
                bound to the root context).
            </p>
            <p>
                The core Magnolia configuration is done in web.xml. By default, all the repositories, logs and working
                folders are created inside the webapp, so the standard configuration is mostly ok for running multiple
                wars under the same server.
            </p>
            <p>
                Here you can find the configuration changes needed in order to deply multiple instances of magnolia to
                the same application server
            </p>
            <subsection name="Changing log4j configuration">
                <p>
                    In order to setup absolute paths for log4j Magnolia need to pass the webapp root to a system
                    property which is then used in the log4j.xml config file. Some application server (e.g. Tomcat)
                    share system variables between different webapp, so you will need to change the variable name to a
                    unique name.
                </p>
                <p>
                    The system variable name is defined by the
                    <code>magnolia.root.sysproperty</code>
                    parameter in web.xml and it's usually set to
                    <code>magnolia.root</code>
                    . In order to run a second instance under the same server you will need to change it to e.g.
                    <code>magnolia2.root</code>
                    both in web.xml and config/log4j.xml.
                </p>
                <p>
                    Note that the magnolia root system property is only needed to configure logging, so you can freely
                    remove it if you are using a different log4j configuration (for example a shared configuration for
                    all the server or a JMS based appender).
                </p>
            </subsection>
            <subsection name="Changing repository jndi names">
                <p>
                    At startup, jcs repositories are bound to jndi using a name specified in
                    <code>repositories.xml</code>
                    . Since jndi resources are shared between webapps running on the same server, you will have to
                    define different names in the xml file. Look for the
                    <code>bindName</code>
                    parameter in the file and change it for any of the 4 magnolia default repositories: if you don't
                    specify a different name multiple instances of magnolia will access the same repository (which is
                    probably not what you want)
                </p>
            </subsection>
            <subsection name="Multiple configurations in the same war">
                <p>
                    Once you are familiar with magnolia, you will probably look for an easier method to switch between
                    different configuration for the public/admin instances or for development/production servers.
                    Magnolia 2.1 supports a simple way to swith between different configurations automatically, without
                    the need for addictionals build scripts. Look at the
                    <a href="../config/multiconfig.html">one war, multiple configs</a>
                    topic.
                </p>
            </subsection>
        </section>
    </body>
</document>
